{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>SaiunCLI is a Python framework for creating visually appealing, user-friendly, and highly customizable Command-Line Interface (CLI) tools. It leverages the power of <code>rich</code> for styling and formatting, making it easy to build modern CLI applications that are both functional and beautiful.</p> <p></p>"},{"location":"#installation","title":"Installation","text":"Latest0.x <pre><code>pip install saiuncli\n</code></pre> <pre><code>pip install saiuncli==\"0.*\"\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from saiuncli.cli import CLI\nfrom saiuncli.command import Command\nfrom saiuncli.option import Option\nfrom saiuncli.theme import Theme\n\n# Custom CLI Theme\ntheme = Theme()\n\n\n# Define your command handlers\ndef hello_handler(name: str, count: int):\n    for i in range(count):\n        print(f\"Hello, {name}!\")\n\ndef count_handler(a: int, b: int):\n    print(f\"{a} + {b} = {a + b}\")\n\n\ndef base_handler(**args):\n    print(\"Base command executed.\")\n    print(f\"{args}\")\n\n\nif __name__ == \"__main__\":\n\n    # Create CLI\n    mycli = CLI(\n        title=\"My Super Cool CLI Tool\",\n        description=\"A simple tool to demonstrate saiuncli.\",\n        version=\"1.0.0\",\n        handler=base_handler, # Command Handler\n        help_flags=[],\n        version_flags=[],\n        options=[\n            Option(\n                flags=[\"-v\", \"--verbose\"],\n                description=\"Enable verbose output.\",\n                action=\"store_true\",\n            ),\n            Option(\n                flags=[\"-q\", \"--quiet\"],\n                description=\"Enable quiet output.\",\n                action=\"store_true\",\n            ),\n            Option(\n                flags=[\"-d\", \"--debug\"],\n                description=\"Enable debug output.\",\n                action=\"store_true\",\n            ),\n        ],\n    )\n\n    # Define Subcommands\n    hello_command = Command(\n        name=\"hello\",\n        handler=hello_handler,\n        description=\"Prints 'Hello, world!' to the console.\",\n        options=[\n            Option(\n                flags=[\"-n\", \"--name\"],\n                description=\"The name to print.\",\n                type=str,\n                required=True,\n            ),\n            Option(\n                flags=[\"-c\", \"--count\"],\n                description=\"The number of times to print the name.\",\n                type=int,\n                default=1,\n            ),\n        ],\n    )\n\n    count_command = Command(\n        name=\"count\",\n        handler=count_handler,\n        description=\"Adds two numbers together.\",\n        options=[\n            Option(\n                flags=[\"-a\"],\n                description=\"The first number.\",\n                type=int,\n                required=True,\n            ),\n            Option(\n                flags=[\"-b\"],\n                description=\"The second number.\",\n                type=int,\n                required=True,\n            ),\n        ],\n    )\n\n\n    # Append Subcommands\n    mycli.add_subcommands([hello_command, count_command])\n\n    # Run your CLI Tool!\n    mycli.run()\n</code></pre>"}]}