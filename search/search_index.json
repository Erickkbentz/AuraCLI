{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>SaiunCLI is a Python framework for creating visually appealing, user-friendly, and highly customizable Command-Line Interface (CLI) tools. It leverages the power of <code>rich</code> for styling and formatting, making it easy to build modern CLI applications that are both functional and beautiful.</p> <p></p>"},{"location":"#installation","title":"Installation","text":"Latest0.x <pre><code>pip install saiuncli\n</code></pre> <pre><code>pip install saiuncli==\"0.*\"\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from saiuncli.cli import CLI\nfrom saiuncli.command import Command\nfrom saiuncli.option import Option\nfrom saiuncli.theme import Theme\n\n# Custom CLI Theme\ntheme = Theme()\n\n\n# Define your command handlers\ndef hello_handler(name: str, count: int):\n    for i in range(count):\n        print(f\"Hello, {name}!\")\n\ndef count_handler(a: int, b: int):\n    print(f\"{a} + {b} = {a + b}\")\n\n\ndef base_handler(**args):\n    print(\"Base command executed.\")\n    print(f\"{args}\")\n\n\nif __name__ == \"__main__\":\n\n    # Create CLI\n    mycli = CLI(\n        title=\"My Super Cool CLI Tool\",\n        description=\"A simple tool to demonstrate saiuncli.\",\n        version=\"1.0.0\",\n        handler=base_handler, # Command Handler\n        help_flags=[],\n        version_flags=[],\n        options=[\n            Option(\n                flags=[\"-v\", \"--verbose\"],\n                description=\"Enable verbose output.\",\n                action=\"store_true\",\n            ),\n            Option(\n                flags=[\"-q\", \"--quiet\"],\n                description=\"Enable quiet output.\",\n                action=\"store_true\",\n            ),\n            Option(\n                flags=[\"-d\", \"--debug\"],\n                description=\"Enable debug output.\",\n                action=\"store_true\",\n            ),\n        ],\n    )\n\n    # Define Subcommands\n    hello_command = Command(\n        name=\"hello\",\n        handler=hello_handler,\n        description=\"Prints 'Hello, world!' to the console.\",\n        options=[\n            Option(\n                flags=[\"-n\", \"--name\"],\n                description=\"The name to print.\",\n                type=str,\n                required=True,\n            ),\n            Option(\n                flags=[\"-c\", \"--count\"],\n                description=\"The number of times to print the name.\",\n                type=int,\n                default=1,\n            ),\n        ],\n    )\n\n    count_command = Command(\n        name=\"count\",\n        handler=count_handler,\n        description=\"Adds two numbers together.\",\n        options=[\n            Option(\n                flags=[\"-a\"],\n                description=\"The first number.\",\n                type=int,\n                required=True,\n            ),\n            Option(\n                flags=[\"-b\"],\n                description=\"The second number.\",\n                type=int,\n                required=True,\n            ),\n        ],\n    )\n\n\n    # Append Subcommands\n    mycli.add_subcommands([hello_command, count_command])\n\n    # Run your CLI Tool!\n    mycli.run()\n</code></pre>"},{"location":"reference/argument/","title":"Reference","text":""},{"location":"reference/argument/#saiuncli.argument.Argument","title":"Argument","text":"<pre><code>Argument(\n    name: str,\n    description: Optional[str] = None,\n    required: Optional[bool] = False,\n    default: Optional[str] = None,\n    choices: Optional[List[Any]] = None,\n    type: Optional[type] = str,\n)\n</code></pre> <p>Parameters:</p> Source code in <code>saiuncli/argument.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    description: Optional[str] = None,\n    required: Optional[bool] = False,\n    default: Optional[str] = None,\n    choices: Optional[List[Any]] = None,\n    type: Optional[type] = str,\n):\n    \"\"\"\n    Initialize an Argument object.\n\n    Args:\n        name (str):\n            The name of the argument.\n        description (Optional[str]):\n            The description to display for the argument.\n        required (Optional[bool]):\n            Whether the argument is required.\n        default (Optional[str]):\n            The default value for the argument.\n        choices (Optional[List[Any]]):\n            The choices available for the argument.\n        type (Optional[type]):\n            The type of the argument.\n    \"\"\"\n    self.name = name\n    self.description = description\n    self.required = required\n    self.default = default\n    self.choices = choices\n    self.type = type\n</code></pre>"},{"location":"reference/argument/#saiuncli.argument.Argument(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name of the argument.</p>"},{"location":"reference/argument/#saiuncli.argument.Argument(description)","title":"<code>description</code>","text":"(<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The description to display for the argument.</p>"},{"location":"reference/argument/#saiuncli.argument.Argument(required)","title":"<code>required</code>","text":"(<code>Optional[bool]</code>, default:                   <code>False</code> )           \u2013            <p>Whether the argument is required.</p>"},{"location":"reference/argument/#saiuncli.argument.Argument(default)","title":"<code>default</code>","text":"(<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The default value for the argument.</p>"},{"location":"reference/argument/#saiuncli.argument.Argument(choices)","title":"<code>choices</code>","text":"(<code>Optional[List[Any]]</code>, default:                   <code>None</code> )           \u2013            <p>The choices available for the argument.</p>"},{"location":"reference/argument/#saiuncli.argument.Argument(type)","title":"<code>type</code>","text":"(<code>Optional[type]</code>, default:                   <code>str</code> )           \u2013            <p>The type of the argument.</p>"},{"location":"reference/cli/","title":"Reference","text":""},{"location":"reference/cli/#saiuncli.cli.CLI","title":"CLI","text":"<pre><code>CLI(\n    title: str,\n    version: Optional[str] = None,\n    theme: Optional[Theme] = None,\n    handler: callable = None,\n    description: Optional[str] = None,\n    options: Optional[List[Option]] = None,\n    arguments: Optional[List[Argument]] = None,\n    help_flags: Optional[List[str]] = None,\n    version_flags: Optional[List[str]] = None,\n    global_options: Optional[List[Option]] = None,\n    global_arguments: Optional[List[Argument]] = None,\n    subcommands: Optional[List[Command]] = None,\n)\n</code></pre> <p>Operations for displaying \"help\" and \"version\" information are handled automatically and reserve the flags [\"--help\", \"-h\"] and [\"--version\", \"-V\"] respectively.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>add_argument</code>             \u2013              <p>Add an argument to the command.</p> </li> <li> <code>add_arguments</code>             \u2013              <p>Add multiple arguments to the command.</p> </li> <li> <code>add_option</code>             \u2013              <p>Add an option to the command.</p> </li> <li> <code>add_options</code>             \u2013              <p>Add multiple options to the command.</p> </li> <li> <code>add_subcommand</code>             \u2013              <p>Add a subcommand to the command.</p> </li> <li> <code>add_subcommands</code>             \u2013              <p>Add multiple subcommands to the command.</p> </li> <li> <code>display_help</code>             \u2013              <p>Display help information for the CLI tool.</p> </li> <li> <code>display_version</code>             \u2013              <p>Display the version of the CLI tool.</p> </li> <li> <code>find_subcommand</code>             \u2013              <p>Find a subcommand by name.</p> </li> <li> <code>flag_to_option</code>             \u2013              <p>Get an option by flag.</p> </li> <li> <code>parse_cli</code>             \u2013              <p>Return the commands and arguments parsed from the command string.</p> </li> <li> <code>run</code>             \u2013              <p>Executes CLI tool based handlers, options, and arguments in</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>all_argument_names</code>               (<code>List[str]</code>)           \u2013            <p>Gather all argument names available to the command.</p> </li> <li> <code>all_arguments</code>               (<code>List[Argument]</code>)           \u2013            <p>Gather all arguments available to the command.</p> </li> <li> <code>all_option_flags</code>               (<code>List[str]</code>)           \u2013            <p>Gather all option flags available to the command.</p> </li> <li> <code>all_option_long_names</code>               (<code>List[str]</code>)           \u2013            <p>Gather all long option names available to the command.</p> </li> <li> <code>all_option_names</code>               (<code>List[str]</code>)           \u2013            <p>Gather all option names available to the command.</p> </li> <li> <code>all_option_short_names</code>               (<code>List[str]</code>)           \u2013            <p>Gather all short option names available to the command.</p> </li> <li> <code>all_options</code>               (<code>List[Option]</code>)           \u2013            <p>Gather all options available to the command.</p> </li> <li> <code>all_subcommand_names</code>               (<code>List[str]</code>)           \u2013            <p>Gather all subcommand names available to the command.</p> </li> <li> <code>inherited_arguments</code>               (<code>List[Argument]</code>)           \u2013            <p>Gather arguments inherited from parent commands if inheritance is enabled.</p> </li> <li> <code>inherited_options</code>               (<code>List[Option]</code>)           \u2013            <p>Gather options inherited from parent commands if inheritance is enabled.</p> </li> </ul> Source code in <code>saiuncli/cli.py</code> <pre><code>def __init__(\n    self,\n    title: str,\n    version: Optional[str] = None,\n    theme: Optional[Theme] = None,\n    handler: callable = None,\n    description: Optional[str] = None,\n    options: Optional[List[Option]] = None,\n    arguments: Optional[List[Argument]] = None,\n    help_flags: Optional[List[str]] = None,\n    version_flags: Optional[List[str]] = None,\n    global_options: Optional[List[Option]] = None,\n    global_arguments: Optional[List[Argument]] = None,\n    subcommands: Optional[List[Command]] = None,\n):\n    \"\"\"\n    Initialize an AuraCLI object.\n\n    Operations for displaying \"help\" and \"version\" information are handled automatically\n    and reserve the flags [\"--help\", \"-h\"] and [\"--version\", \"-V\"] respectively.\n\n    Args:\n        title (str):\n            The title of the CLI tool.\n        version (Optional[str]):\n            The version of the CLI tool.\n        theme (Optional[Theme]):\n            The theme to use for the CLI tool.\n        handler (callable):\n            The function to execute when the base CLI command is called.\n        description (Optional[str]):\n            The description of the base CLI command.\n        options (Optional[List[Option]]):\n            The options available for the base CLI command.\n        arguments (Optional[List[Argument]]):\n            The arguments available for the base CLI command\n        help_flags (Optional[List[str]]):\n            The flag overrides for CLI help operation.\n            Defaults to [\"-h\", \"--help\"] if not provided.\n        version_flags (Optional[List[str]]):\n            The flag overrides for CLI version operation.\n            Defaults to [\"-V\", \"--version\"] if not provided.\n        global_options (Optional[List[Option]]):\n            The global options available for the base CLI command and any subcommands.\n        global_arguments (Optional[List[Argument]]):\n            The global arguments available for the base CLI command and any subcommands.\n        subcommands (Optional[List[Command]]):\n            The subcommands available for the base CLI command.\n    \"\"\"\n    self._version_flags = version_flags or _GLOBAL_FLAGS[_VERSION_NAME]\n    self._help_flags = help_flags or _GLOBAL_FLAGS[_HELP_NAME]\n    _validate_flags(self._help_flags)\n    _validate_flags(self._version_flags)\n    if any(flag in self._help_flags for flag in self._version_flags):\n        raise ValueError(\"Duplicate flags detected for help and version operations.\")\n\n    super().__init__(\n        name=_ROOT_COMMAND_NAME,\n        handler=handler,\n        description=description,\n        options=options,\n        inherit_options=False,\n        arguments=arguments,\n        inherit_arguments=False,\n        subcommands=subcommands,\n    )\n    self.title = title\n    self.version = version\n    self.theme = theme or Theme()\n    self.global_options = global_options or []\n    self.global_arguments = global_arguments or []\n    self._cli_command = None\n\n    highlighter = OptionHighlighter()\n    self._highlighter = highlighter\n    self.console = Console(\n        theme=RichTheme(\n            {\n                \"long_flag\": self.theme.option_long,\n                \"short_flag\": self.theme.option_short,\n            }\n        ),\n        highlighter=highlighter,\n    )\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI(title)","title":"<code>title</code>","text":"(<code>str</code>)           \u2013            <p>The title of the CLI tool.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(version)","title":"<code>version</code>","text":"(<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The version of the CLI tool.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(theme)","title":"<code>theme</code>","text":"(<code>Optional[Theme]</code>, default:                   <code>None</code> )           \u2013            <p>The theme to use for the CLI tool.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(handler)","title":"<code>handler</code>","text":"(<code>callable</code>, default:                   <code>None</code> )           \u2013            <p>The function to execute when the base CLI command is called.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(description)","title":"<code>description</code>","text":"(<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The description of the base CLI command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(options)","title":"<code>options</code>","text":"(<code>Optional[List[Option]]</code>, default:                   <code>None</code> )           \u2013            <p>The options available for the base CLI command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(arguments)","title":"<code>arguments</code>","text":"(<code>Optional[List[Argument]]</code>, default:                   <code>None</code> )           \u2013            <p>The arguments available for the base CLI command</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(help_flags)","title":"<code>help_flags</code>","text":"(<code>Optional[List[str]]</code>, default:                   <code>None</code> )           \u2013            <p>The flag overrides for CLI help operation. Defaults to [\"-h\", \"--help\"] if not provided.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(version_flags)","title":"<code>version_flags</code>","text":"(<code>Optional[List[str]]</code>, default:                   <code>None</code> )           \u2013            <p>The flag overrides for CLI version operation. Defaults to [\"-V\", \"--version\"] if not provided.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(global_options)","title":"<code>global_options</code>","text":"(<code>Optional[List[Option]]</code>, default:                   <code>None</code> )           \u2013            <p>The global options available for the base CLI command and any subcommands.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(global_arguments)","title":"<code>global_arguments</code>","text":"(<code>Optional[List[Argument]]</code>, default:                   <code>None</code> )           \u2013            <p>The global arguments available for the base CLI command and any subcommands.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI(subcommands)","title":"<code>subcommands</code>","text":"(<code>Optional[List[Command]]</code>, default:                   <code>None</code> )           \u2013            <p>The subcommands available for the base CLI command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.all_argument_names","title":"all_argument_names  <code>property</code>","text":"<pre><code>all_argument_names: List[str]\n</code></pre> <p>Gather all argument names available to the command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.all_arguments","title":"all_arguments  <code>property</code>","text":"<pre><code>all_arguments: List[Argument]\n</code></pre> <p>Gather all arguments available to the command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.all_option_flags","title":"all_option_flags  <code>property</code>","text":"<pre><code>all_option_flags: List[str]\n</code></pre> <p>Gather all option flags available to the command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.all_option_long_names","title":"all_option_long_names  <code>property</code>","text":"<pre><code>all_option_long_names: List[str]\n</code></pre> <p>Gather all long option names available to the command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.all_option_names","title":"all_option_names  <code>property</code>","text":"<pre><code>all_option_names: List[str]\n</code></pre> <p>Gather all option names available to the command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.all_option_short_names","title":"all_option_short_names  <code>property</code>","text":"<pre><code>all_option_short_names: List[str]\n</code></pre> <p>Gather all short option names available to the command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.all_options","title":"all_options  <code>property</code>","text":"<pre><code>all_options: List[Option]\n</code></pre> <p>Gather all options available to the command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.all_subcommand_names","title":"all_subcommand_names  <code>property</code>","text":"<pre><code>all_subcommand_names: List[str]\n</code></pre> <p>Gather all subcommand names available to the command.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.inherited_arguments","title":"inherited_arguments  <code>property</code>","text":"<pre><code>inherited_arguments: List[Argument]\n</code></pre> <p>Gather arguments inherited from parent commands if inheritance is enabled.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.inherited_options","title":"inherited_options  <code>property</code>","text":"<pre><code>inherited_options: List[Option]\n</code></pre> <p>Gather options inherited from parent commands if inheritance is enabled.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.add_argument","title":"add_argument","text":"<pre><code>add_argument(argument: Argument)\n</code></pre> <p>Add an argument to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_argument(self, argument: Argument):\n    \"\"\"Add an argument to the command.\"\"\"\n    self.arguments.append(argument)\n    self._validate_arguments(self.all_arguments)\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.add_arguments","title":"add_arguments","text":"<pre><code>add_arguments(arguments: List[Argument])\n</code></pre> <p>Add multiple arguments to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_arguments(self, arguments: List[Argument]):\n    \"\"\"Add multiple arguments to the command.\"\"\"\n    self.arguments.extend(arguments)\n    self._validate_arguments(self.all_arguments)\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.add_option","title":"add_option","text":"<pre><code>add_option(option: Option)\n</code></pre> <p>Add an option to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_option(self, option: Option):\n    \"\"\"Add an option to the command.\"\"\"\n    self.options.append(option)\n    self._validate_options(self.all_options)\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.add_options","title":"add_options","text":"<pre><code>add_options(options: List[Option])\n</code></pre> <p>Add multiple options to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_options(self, options: List[Option]):\n    \"\"\"Add multiple options to the command.\"\"\"\n    self.options.extend(options)\n    self._validate_options(self.all_options)\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.add_subcommand","title":"add_subcommand","text":"<pre><code>add_subcommand(subcommand: Command)\n</code></pre> <p>Add a subcommand to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_subcommand(self, subcommand: \"Command\"):\n    \"\"\"Add a subcommand to the command.\"\"\"\n    subcommand._parent = self\n    subcommand._version_flags = self._version_flags\n    subcommand._help_flags = self._help_flags\n    self.subcommands.append(subcommand)\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.add_subcommands","title":"add_subcommands","text":"<pre><code>add_subcommands(subcommands: List[Command])\n</code></pre> <p>Add multiple subcommands to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_subcommands(self, subcommands: List[\"Command\"]):\n    \"\"\"Add multiple subcommands to the command.\"\"\"\n    for subcommand in subcommands:\n        subcommand._parent = self\n        subcommand._version_flags = self._version_flags\n        subcommand._help_flags = self._help_flags\n    self.subcommands.extend(subcommands)\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.display_help","title":"display_help","text":"<pre><code>display_help(command: Command)\n</code></pre> <p>Display help information for the CLI tool.</p> <p>Parameters:</p> Source code in <code>saiuncli/cli.py</code> <pre><code>def display_help(self, command: Command):\n    \"\"\"Display help information for the CLI tool.\n\n    Args:\n        command (List[str]):\n            The command to display help for.\n    \"\"\"\n    options = command.all_options\n    arguments = command.all_arguments\n    subcommands = command.subcommands\n\n    title = Text(self.title, style=self.theme.title)\n    if self.version:\n        version = Text(f\"v{self.version}\", style=self.theme.version)\n        title.pad_right(1)\n        title.append(version)\n\n    self.console.print(\n        title,\n        justify=\"center\",\n    )\n    self.console.print()\n\n    if self.description:\n        title_description = Text(self.description, style=self.theme.title_description)\n        self.console.print(\n            title_description,\n            justify=\"center\",\n        )\n        self.console.print()\n    self.console.print()\n\n    # Display Usage\n    commands_string = f\"{self._cli_command} \"\n    current_command = command\n    subcommand_string = \"\"\n    while current_command and current_command.name != _ROOT_COMMAND_NAME:\n        subcommand_string += f\"{current_command.name} \" + subcommand_string\n        current_command = current_command._parent\n    commands_string += subcommand_string\n\n    usage = Text(\n        f\"Usage: {commands_string} [SUBCOMMANDS][OPTIONS][ARGUMENTS]\\n\", style=self.theme.usage\n    )\n    self.console.print(usage)\n\n    # If subcommands are available, display them\n    if subcommands:\n        subcommands_table = Table(highlight=True, box=None, show_header=False)\n        for subcommand in subcommands:\n            help_message = (\n                Text.from_markup(subcommand.description) if subcommand.description else Text(\"\")\n            )\n            help_message.style = self.theme.subcommand_description\n\n            if subcommand.description:\n                subcommand_name = Text(subcommand.name, style=self.theme.subcommand)\n                subcommand_name.pad_right(5)\n\n                subcommands_table.add_row(subcommand_name, help_message)\n        self.console.print(\n            Panel(\n                subcommands_table, border_style=\"dim\", title_align=\"left\", title=\"Subcommands\"\n            )\n        )\n\n    options_table = Table(highlight=True, box=None, show_header=False)\n\n    for option in options:\n        help_message = Text(\"\")\n        if option.description:\n            help_message = Text.from_markup(option.description)\n            help_message.style = self.theme.option_description\n        if len(option.flags) == 2:\n            opt1 = self._highlighter(option.flags[0])\n            opt2 = self._highlighter(option.flags[1])\n        else:\n            opt1 = self._highlighter(option.flags[0])\n            opt2 = Text(\"\")\n        opt2.pad_right(5)\n        options_table.add_row(opt1, opt2, help_message)\n\n    # Add help and version flags to the options table\n    if len(self._version_flags) == 2:\n        version_flag1 = self._highlighter(self._version_flags[0])\n        version_flag2 = self._highlighter(self._version_flags[1])\n    else:\n        version_flag1 = self._highlighter(self._version_flags[0])\n        version_flag2 = Text(\"\")\n    version_flag2.pad_right(5)\n    options_table.add_row(\n        version_flag1,\n        version_flag2,\n        Text(\"Display the version.\", style=self.theme.option_description),\n    )\n\n    if len(self._help_flags) == 2:\n        help_flag1 = self._highlighter(self._help_flags[0])\n        help_flag2 = self._highlighter(self._help_flags[1])\n    else:\n        help_flag1 = self._highlighter(self._help_flags[0])\n        help_flag2 = Text(\"\")\n    help_flag2.pad_right(5)\n    options_table.add_row(\n        help_flag1,\n        help_flag2,\n        Text(\"Display this help message and exit.\", style=self.theme.option_description),\n    )\n\n    self.console.print(\n        Panel(options_table, border_style=\"dim\", title_align=\"left\", title=\"Options\")\n    )\n\n    # If subcommands are available, display them\n    if arguments:\n        argument_table = Table(highlight=True, box=None, show_header=False)\n        for argument in arguments:\n            help_message = \"\"\n            if argument.description:\n                help_message = Text.from_markup(argument.description)\n                help_message.style = self.theme.argument_description\n\n                argument_name = Text(argument.name, style=self.theme.argument)\n                argument_table.add_row(argument_name, help_message)\n        self.console.print(\n            Panel(argument_table, border_style=\"dim\", title_align=\"left\", title=\"Arguments\")\n        )\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.display_help(command)","title":"<code>command</code>","text":"(<code>List[str]</code>)           \u2013            <p>The command to display help for.</p>"},{"location":"reference/cli/#saiuncli.cli.CLI.display_version","title":"display_version","text":"<pre><code>display_version()\n</code></pre> <p>Display the version of the CLI tool.</p> Source code in <code>saiuncli/cli.py</code> <pre><code>def display_version(self):\n    \"\"\"Display the version of the CLI tool.\"\"\"\n\n    self.console.print(\n        Text(\n            f\"v{self.version}\",\n            style=self.theme.version,\n        ),\n        justify=\"left\",\n    )\n    pass\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.find_subcommand","title":"find_subcommand","text":"<pre><code>find_subcommand(name: str) -&gt; Optional[Command]\n</code></pre> <p>Find a subcommand by name.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def find_subcommand(self, name: str) -&gt; Optional[\"Command\"]:\n    \"\"\"Find a subcommand by name.\"\"\"\n    for subcommand in self.subcommands:\n        if subcommand.name == name:\n            return subcommand\n    return None\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.flag_to_option","title":"flag_to_option","text":"<pre><code>flag_to_option(flag: str) -&gt; Optional[Option]\n</code></pre> <p>Get an option by flag.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def flag_to_option(self, flag: str) -&gt; Optional[Option]:\n    \"\"\"Get an option by flag.\"\"\"\n    for option in self.all_options:\n        if flag in option.flags:\n            return option\n    return None\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.parse_cli","title":"parse_cli","text":"<pre><code>parse_cli() -&gt; ParsedCLI\n</code></pre> <p>Return the commands and arguments parsed from the command string.</p> <p>Returns:</p> <ul> <li> <code>ParsedCLI</code> (              <code>ParsedCLI</code> )          \u2013            <p>The parsed commands and arguments.</p> </li> </ul> Source code in <code>saiuncli/cli.py</code> <pre><code>def parse_cli(self) -&gt; ParsedCLI:\n    \"\"\"Return the commands and arguments parsed from the command string.\n\n    Returns:\n        ParsedCLI: The parsed commands and arguments.\n    \"\"\"\n    parsed = {\n        \"commands\": [\"root\"],\n        \"parsed_options\": {},\n        \"parsed_args\": {},\n        _VERSION_NAME: False,\n        _HELP_NAME: False,\n    }\n    self._cli_command = sys.argv[0]\n    cli_args = sys.argv[1:]\n\n    latest_command = self\n    positional_args_count = 0\n\n    while cli_args:\n        arg = cli_args.pop(0)\n        if _is_flag(arg):\n            if _is_short_stack_flag(arg):\n                short_flags = _split_short_stack_flags(arg)\n                arg = short_flags.pop(0)\n                cli_args = short_flags + cli_args\n            self._process_flag(arg, latest_command, parsed, cli_args)\n        else:\n            found_command = latest_command.find_subcommand(arg)\n            if found_command:\n                latest_command = found_command\n                parsed[\"commands\"].append(arg)\n                continue\n            self._process_argument(arg, latest_command, parsed, positional_args_count)\n            positional_args_count += 1\n\n    self._set_defaults_for_command(latest_command, parsed)\n\n    return ParsedCLI(\n        commands=parsed[\"commands\"],\n        parsed_options=parsed[\"parsed_options\"],\n        parsed_args=parsed[\"parsed_args\"],\n        help=parsed[_HELP_NAME],\n        version=parsed[_VERSION_NAME],\n    )\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.run","title":"run","text":"<pre><code>run(parsed_cli: Optional[ParsedCLI] = None)\n</code></pre> <p>Executes CLI tool based handlers, options, and arguments in     the ParsedCLI.</p> <p>Parameters:</p> Source code in <code>saiuncli/cli.py</code> <pre><code>def run(self, parsed_cli: Optional[ParsedCLI] = None):\n    \"\"\"Executes CLI tool based handlers, options, and arguments in\n        the ParsedCLI.\n\n\n    Args:\n        parsed_cli (Optional[ParsedCLI]):\n            If not provided, CLI will be parsed by calling `self.parse_cli()`\n    \"\"\"\n    parsed_cli = parsed_cli or self.parse_cli()\n\n    command_name = parsed_cli.commands[-1]\n\n    if command_name == _ROOT_COMMAND_NAME:\n        command = self\n    else:\n        command = self.find_subcommand(command_name)\n\n    if parsed_cli.help:\n        self.display_help(command)\n        return\n    if parsed_cli.version:\n        self.display_version()\n        return\n    kwargs = parsed_cli.handler_kwargs_dict()\n    command.handler(**kwargs)\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.CLI.run(parsed_cli)","title":"<code>parsed_cli</code>","text":"(<code>Optional[ParsedCLI]</code>, default:                   <code>None</code> )           \u2013            <p>If not provided, CLI will be parsed by calling <code>self.parse_cli()</code></p>"},{"location":"reference/cli/#saiuncli.cli.ParsedCLI","title":"ParsedCLI","text":"<pre><code>ParsedCLI(\n    commands: List[str],\n    parsed_options: Dict[str, Any],\n    parsed_args: Dict[str, Any],\n    help: bool = False,\n    version: bool = False,\n)\n</code></pre> <p>Parameters:</p> Source code in <code>saiuncli/cli.py</code> <pre><code>def __init__(\n    self,\n    commands: List[str],\n    parsed_options: Dict[str, Any],\n    parsed_args: Dict[str, Any],\n    help: bool = False,\n    version: bool = False,\n):\n    \"\"\"\n    Initialize a ParsedCLI object.\n\n    Args:\n        commands (List[str]): List of commands parsed from the CLI input.\n        parsed_options (Dict[str, Any]): Dictionary of option names and their values.\n        parsed_args (Dict[str, Any]): Dictionary of argument names and their values.\n    \"\"\"\n    self.commands = commands\n    self.parsed_options = parsed_options\n    self.parsed_args = parsed_args\n    self.help = help\n    self.version = version\n</code></pre>"},{"location":"reference/cli/#saiuncli.cli.ParsedCLI(commands)","title":"<code>commands</code>","text":"(<code>List[str]</code>)           \u2013            <p>List of commands parsed from the CLI input.</p>"},{"location":"reference/cli/#saiuncli.cli.ParsedCLI(parsed_options)","title":"<code>parsed_options</code>","text":"(<code>Dict[str, Any]</code>)           \u2013            <p>Dictionary of option names and their values.</p>"},{"location":"reference/cli/#saiuncli.cli.ParsedCLI(parsed_args)","title":"<code>parsed_args</code>","text":"(<code>Dict[str, Any]</code>)           \u2013            <p>Dictionary of argument names and their values.</p>"},{"location":"reference/command/","title":"Reference","text":""},{"location":"reference/command/#saiuncli.command.Command","title":"Command","text":"<pre><code>Command(\n    name: str,\n    handler: callable,\n    description: Optional[str] = None,\n    options: Optional[List[Option]] = None,\n    inherit_options: Optional[bool] = False,\n    arguments: Optional[List[Argument]] = None,\n    inherit_arguments: Optional[bool] = False,\n    subcommands: Optional[List[Command]] = None,\n)\n</code></pre> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>add_argument</code>             \u2013              <p>Add an argument to the command.</p> </li> <li> <code>add_arguments</code>             \u2013              <p>Add multiple arguments to the command.</p> </li> <li> <code>add_option</code>             \u2013              <p>Add an option to the command.</p> </li> <li> <code>add_options</code>             \u2013              <p>Add multiple options to the command.</p> </li> <li> <code>add_subcommand</code>             \u2013              <p>Add a subcommand to the command.</p> </li> <li> <code>add_subcommands</code>             \u2013              <p>Add multiple subcommands to the command.</p> </li> <li> <code>find_subcommand</code>             \u2013              <p>Find a subcommand by name.</p> </li> <li> <code>flag_to_option</code>             \u2013              <p>Get an option by flag.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>all_argument_names</code>               (<code>List[str]</code>)           \u2013            <p>Gather all argument names available to the command.</p> </li> <li> <code>all_arguments</code>               (<code>List[Argument]</code>)           \u2013            <p>Gather all arguments available to the command.</p> </li> <li> <code>all_option_flags</code>               (<code>List[str]</code>)           \u2013            <p>Gather all option flags available to the command.</p> </li> <li> <code>all_option_long_names</code>               (<code>List[str]</code>)           \u2013            <p>Gather all long option names available to the command.</p> </li> <li> <code>all_option_names</code>               (<code>List[str]</code>)           \u2013            <p>Gather all option names available to the command.</p> </li> <li> <code>all_option_short_names</code>               (<code>List[str]</code>)           \u2013            <p>Gather all short option names available to the command.</p> </li> <li> <code>all_options</code>               (<code>List[Option]</code>)           \u2013            <p>Gather all options available to the command.</p> </li> <li> <code>all_subcommand_names</code>               (<code>List[str]</code>)           \u2013            <p>Gather all subcommand names available to the command.</p> </li> <li> <code>inherited_arguments</code>               (<code>List[Argument]</code>)           \u2013            <p>Gather arguments inherited from parent commands if inheritance is enabled.</p> </li> <li> <code>inherited_options</code>               (<code>List[Option]</code>)           \u2013            <p>Gather options inherited from parent commands if inheritance is enabled.</p> </li> </ul> Source code in <code>saiuncli/command.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    handler: callable,\n    description: Optional[str] = None,\n    options: Optional[List[Option]] = None,\n    inherit_options: Optional[bool] = False,\n    arguments: Optional[List[Argument]] = None,\n    inherit_arguments: Optional[bool] = False,\n    subcommands: Optional[List[\"Command\"]] = None,\n):\n    \"\"\"\n    Initialize a Command object.\n\n    Args:\n        name (str):\n            The name of the command.\n        handler (callable):\n            The function to execute when the command is called.\n        description (Optional[str]):\n            The description of the command.\n        options (Optional[List[Option]]):\n            The options available for the command.\n        inherit_options (Optional[bool]):\n            Whether to inherit options from parent commands.\n        arguments (Optional[Argument]):\n            The arguments available for the command.\n        inherit_arguments (Optional[bool]):\n            Whether to inherit arguments from parent commands.\n        subcommands (Optional[List[Command]]):\n            The subcommands available for the command.\n    \"\"\"\n    self.name = name\n    self.handler = handler\n    self.description = description\n    self.options = options or []\n    self.inherit_options = inherit_options\n    self.arguments = arguments or []\n    self.inherit_arguments = inherit_arguments\n    self.subcommands = subcommands or []\n\n    for subcommand in self.subcommands:\n        subcommand._parent = self\n        subcommand._version_flags = self._version_flags\n        subcommand._help_flags = self._help_flags\n\n    self._validate_options(self.all_options)\n</code></pre>"},{"location":"reference/command/#saiuncli.command.Command(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name of the command.</p>"},{"location":"reference/command/#saiuncli.command.Command(handler)","title":"<code>handler</code>","text":"(<code>callable</code>)           \u2013            <p>The function to execute when the command is called.</p>"},{"location":"reference/command/#saiuncli.command.Command(description)","title":"<code>description</code>","text":"(<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The description of the command.</p>"},{"location":"reference/command/#saiuncli.command.Command(options)","title":"<code>options</code>","text":"(<code>Optional[List[Option]]</code>, default:                   <code>None</code> )           \u2013            <p>The options available for the command.</p>"},{"location":"reference/command/#saiuncli.command.Command(inherit_options)","title":"<code>inherit_options</code>","text":"(<code>Optional[bool]</code>, default:                   <code>False</code> )           \u2013            <p>Whether to inherit options from parent commands.</p>"},{"location":"reference/command/#saiuncli.command.Command(arguments)","title":"<code>arguments</code>","text":"(<code>Optional[Argument]</code>, default:                   <code>None</code> )           \u2013            <p>The arguments available for the command.</p>"},{"location":"reference/command/#saiuncli.command.Command(inherit_arguments)","title":"<code>inherit_arguments</code>","text":"(<code>Optional[bool]</code>, default:                   <code>False</code> )           \u2013            <p>Whether to inherit arguments from parent commands.</p>"},{"location":"reference/command/#saiuncli.command.Command(subcommands)","title":"<code>subcommands</code>","text":"(<code>Optional[List[Command]]</code>, default:                   <code>None</code> )           \u2013            <p>The subcommands available for the command.</p>"},{"location":"reference/command/#saiuncli.command.Command.all_argument_names","title":"all_argument_names  <code>property</code>","text":"<pre><code>all_argument_names: List[str]\n</code></pre> <p>Gather all argument names available to the command.</p>"},{"location":"reference/command/#saiuncli.command.Command.all_arguments","title":"all_arguments  <code>property</code>","text":"<pre><code>all_arguments: List[Argument]\n</code></pre> <p>Gather all arguments available to the command.</p>"},{"location":"reference/command/#saiuncli.command.Command.all_option_flags","title":"all_option_flags  <code>property</code>","text":"<pre><code>all_option_flags: List[str]\n</code></pre> <p>Gather all option flags available to the command.</p>"},{"location":"reference/command/#saiuncli.command.Command.all_option_long_names","title":"all_option_long_names  <code>property</code>","text":"<pre><code>all_option_long_names: List[str]\n</code></pre> <p>Gather all long option names available to the command.</p>"},{"location":"reference/command/#saiuncli.command.Command.all_option_names","title":"all_option_names  <code>property</code>","text":"<pre><code>all_option_names: List[str]\n</code></pre> <p>Gather all option names available to the command.</p>"},{"location":"reference/command/#saiuncli.command.Command.all_option_short_names","title":"all_option_short_names  <code>property</code>","text":"<pre><code>all_option_short_names: List[str]\n</code></pre> <p>Gather all short option names available to the command.</p>"},{"location":"reference/command/#saiuncli.command.Command.all_options","title":"all_options  <code>property</code>","text":"<pre><code>all_options: List[Option]\n</code></pre> <p>Gather all options available to the command.</p>"},{"location":"reference/command/#saiuncli.command.Command.all_subcommand_names","title":"all_subcommand_names  <code>property</code>","text":"<pre><code>all_subcommand_names: List[str]\n</code></pre> <p>Gather all subcommand names available to the command.</p>"},{"location":"reference/command/#saiuncli.command.Command.inherited_arguments","title":"inherited_arguments  <code>property</code>","text":"<pre><code>inherited_arguments: List[Argument]\n</code></pre> <p>Gather arguments inherited from parent commands if inheritance is enabled.</p>"},{"location":"reference/command/#saiuncli.command.Command.inherited_options","title":"inherited_options  <code>property</code>","text":"<pre><code>inherited_options: List[Option]\n</code></pre> <p>Gather options inherited from parent commands if inheritance is enabled.</p>"},{"location":"reference/command/#saiuncli.command.Command.add_argument","title":"add_argument","text":"<pre><code>add_argument(argument: Argument)\n</code></pre> <p>Add an argument to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_argument(self, argument: Argument):\n    \"\"\"Add an argument to the command.\"\"\"\n    self.arguments.append(argument)\n    self._validate_arguments(self.all_arguments)\n</code></pre>"},{"location":"reference/command/#saiuncli.command.Command.add_arguments","title":"add_arguments","text":"<pre><code>add_arguments(arguments: List[Argument])\n</code></pre> <p>Add multiple arguments to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_arguments(self, arguments: List[Argument]):\n    \"\"\"Add multiple arguments to the command.\"\"\"\n    self.arguments.extend(arguments)\n    self._validate_arguments(self.all_arguments)\n</code></pre>"},{"location":"reference/command/#saiuncli.command.Command.add_option","title":"add_option","text":"<pre><code>add_option(option: Option)\n</code></pre> <p>Add an option to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_option(self, option: Option):\n    \"\"\"Add an option to the command.\"\"\"\n    self.options.append(option)\n    self._validate_options(self.all_options)\n</code></pre>"},{"location":"reference/command/#saiuncli.command.Command.add_options","title":"add_options","text":"<pre><code>add_options(options: List[Option])\n</code></pre> <p>Add multiple options to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_options(self, options: List[Option]):\n    \"\"\"Add multiple options to the command.\"\"\"\n    self.options.extend(options)\n    self._validate_options(self.all_options)\n</code></pre>"},{"location":"reference/command/#saiuncli.command.Command.add_subcommand","title":"add_subcommand","text":"<pre><code>add_subcommand(subcommand: Command)\n</code></pre> <p>Add a subcommand to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_subcommand(self, subcommand: \"Command\"):\n    \"\"\"Add a subcommand to the command.\"\"\"\n    subcommand._parent = self\n    subcommand._version_flags = self._version_flags\n    subcommand._help_flags = self._help_flags\n    self.subcommands.append(subcommand)\n</code></pre>"},{"location":"reference/command/#saiuncli.command.Command.add_subcommands","title":"add_subcommands","text":"<pre><code>add_subcommands(subcommands: List[Command])\n</code></pre> <p>Add multiple subcommands to the command.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def add_subcommands(self, subcommands: List[\"Command\"]):\n    \"\"\"Add multiple subcommands to the command.\"\"\"\n    for subcommand in subcommands:\n        subcommand._parent = self\n        subcommand._version_flags = self._version_flags\n        subcommand._help_flags = self._help_flags\n    self.subcommands.extend(subcommands)\n</code></pre>"},{"location":"reference/command/#saiuncli.command.Command.find_subcommand","title":"find_subcommand","text":"<pre><code>find_subcommand(name: str) -&gt; Optional[Command]\n</code></pre> <p>Find a subcommand by name.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def find_subcommand(self, name: str) -&gt; Optional[\"Command\"]:\n    \"\"\"Find a subcommand by name.\"\"\"\n    for subcommand in self.subcommands:\n        if subcommand.name == name:\n            return subcommand\n    return None\n</code></pre>"},{"location":"reference/command/#saiuncli.command.Command.flag_to_option","title":"flag_to_option","text":"<pre><code>flag_to_option(flag: str) -&gt; Optional[Option]\n</code></pre> <p>Get an option by flag.</p> Source code in <code>saiuncli/command.py</code> <pre><code>def flag_to_option(self, flag: str) -&gt; Optional[Option]:\n    \"\"\"Get an option by flag.\"\"\"\n    for option in self.all_options:\n        if flag in option.flags:\n            return option\n    return None\n</code></pre>"},{"location":"reference/option/","title":"Reference","text":""},{"location":"reference/option/#saiuncli.option.Option","title":"Option","text":"<pre><code>Option(\n    name: Optional[str] = None,\n    flags: Optional[List[str]] = None,\n    description: Optional[str] = None,\n    required: Optional[bool] = False,\n    action: Optional[\n        Literal[\n            \"store\",\n            \"store_true\",\n            \"store_false\",\n            \"append\",\n            \"extend\",\n            \"count\",\n        ]\n    ] = \"store\",\n    default: Optional[str] = None,\n    choices: Optional[List[Any]] = None,\n    type: Optional[type] = str,\n    nargs: Optional[Union[int, Literal[\"*\"]]] = None,\n)\n</code></pre> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>handle</code>             \u2013              <p>Handle the value of the option based on Option setup.</p> </li> <li> <code>parse</code>             \u2013              <p>Parse the raw value from the command line.</p> </li> <li> <code>validate</code>             \u2013              <p>Validate the value of the option.</p> </li> </ul> Source code in <code>saiuncli/option.py</code> <pre><code>def __init__(\n    self,\n    name: Optional[str] = None,\n    flags: Optional[List[str]] = None,\n    description: Optional[str] = None,\n    required: Optional[bool] = False,\n    action: Optional[\n        Literal[\"store\", \"store_true\", \"store_false\", \"append\", \"extend\", \"count\"]\n    ] = \"store\",\n    default: Optional[str] = None,\n    choices: Optional[List[Any]] = None,\n    type: Optional[type] = str,\n    nargs: Optional[Union[int, Literal[\"*\"]]] = None,\n):\n    \"\"\"\n    Initialize an Option object.\n\n    Args:\n        name (Optional[str]):\n            This is the name of the option. The resolved value should be referenced by\n            this name in the handler. If not provided, the flag name will be used.\n            If both the short and long flags are provided, the long flag name will be used.\n        flags (List[str]):\n            The flags to use for the option. At most 1 short flag and 1 long flag are allowed.\n            If not provided, the name parameter will be used as the long flag.\n        description (Optional[str]):\n            The description to display for the option.\n        required (Optional[bool]):\n            Whether the option is required.\n        action (Optional[\n            Literal[\"store\", \"store_true\", \"store_false\", \"append\", \"extend\", \"count\"]\n        ]):\n            The action to take with the option. Default is \"store\".\n        default (Optional[str]):\n            The default value for the option.\n        choices (Optional[List[Any]]):\n            The choices available for the option.\n        type (Optional[type]):\n            The type of the option.\n        nargs (Optional[Union[int, Literal[\"*\"]]):\n            The number of arguments that should be consumed.\n            This is only applicable for actions - \"store\", \"append\", and \"extend\".\n            if nargs is not None, the resolved value for the Option will be always be a list.\n    \"\"\"\n    self.name = name\n    self.flags = flags\n    if not self.flags or self.name:\n        raise ValueError(\"Either flags or name must be provided.\")\n\n    if not self.flags:\n        self.flags = [f\"--{self.name}\"]\n    if not self.name:\n        self.name = self.long_name or self.short_name\n\n    self.description = description\n    self.required = required\n    self.action = action\n    self.default = default\n    self.choices = choices\n    self.type = type\n    self.nargs = nargs\n\n    _validate_flags(self.flags)\n</code></pre>"},{"location":"reference/option/#saiuncli.option.Option(name)","title":"<code>name</code>","text":"(<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>This is the name of the option. The resolved value should be referenced by this name in the handler. If not provided, the flag name will be used. If both the short and long flags are provided, the long flag name will be used.</p>"},{"location":"reference/option/#saiuncli.option.Option(flags)","title":"<code>flags</code>","text":"(<code>List[str]</code>, default:                   <code>None</code> )           \u2013            <p>The flags to use for the option. At most 1 short flag and 1 long flag are allowed. If not provided, the name parameter will be used as the long flag.</p>"},{"location":"reference/option/#saiuncli.option.Option(description)","title":"<code>description</code>","text":"(<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The description to display for the option.</p>"},{"location":"reference/option/#saiuncli.option.Option(required)","title":"<code>required</code>","text":"(<code>Optional[bool]</code>, default:                   <code>False</code> )           \u2013            <p>Whether the option is required.</p>"},{"location":"reference/option/#saiuncli.option.Option(]))","title":"<code>])</code>","text":"\u2013            <p>The action to take with the option. Default is \"store\".</p>"},{"location":"reference/option/#saiuncli.option.Option(default)","title":"<code>default</code>","text":"(<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The default value for the option.</p>"},{"location":"reference/option/#saiuncli.option.Option(choices)","title":"<code>choices</code>","text":"(<code>Optional[List[Any]]</code>, default:                   <code>None</code> )           \u2013            <p>The choices available for the option.</p>"},{"location":"reference/option/#saiuncli.option.Option(type)","title":"<code>type</code>","text":"(<code>Optional[type]</code>, default:                   <code>str</code> )           \u2013            <p>The type of the option.</p>"},{"location":"reference/option/#saiuncli.option.Option(nargs)","title":"<code>nargs</code>","text":"(<code>Optional[Union[int, Literal[\"*\"]]</code>, default:                   <code>None</code> )           \u2013            <p>The number of arguments that should be consumed. This is only applicable for actions - \"store\", \"append\", and \"extend\". if nargs is not None, the resolved value for the Option will be always be a list.</p>"},{"location":"reference/option/#saiuncli.option.Option.handle","title":"handle","text":"<pre><code>handle(value: Optional[Any]) -&gt; Any\n</code></pre> <p>Handle the value of the option based on Option setup.</p> Source code in <code>saiuncli/option.py</code> <pre><code>def handle(self, value: Optional[Any]) -&gt; Any:\n    \"\"\"Handle the value of the option based on Option setup.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/option/#saiuncli.option.Option.parse","title":"parse","text":"<pre><code>parse(raw_value: str) -&gt; Any\n</code></pre> <p>Parse the raw value from the command line.</p> Source code in <code>saiuncli/option.py</code> <pre><code>def parse(self, raw_value: str) -&gt; Any:\n    \"\"\"Parse the raw value from the command line.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/option/#saiuncli.option.Option.validate","title":"validate","text":"<pre><code>validate(value: Any) -&gt; bool\n</code></pre> <p>Validate the value of the option.</p> Source code in <code>saiuncli/option.py</code> <pre><code>def validate(self, value: Any) -&gt; bool:\n    \"\"\"Validate the value of the option.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/theme/","title":"Reference","text":""},{"location":"reference/theme/#saiuncli.theme.Theme","title":"Theme","text":"<pre><code>Theme(\n    styles: Optional[Dict[str, Style]] = None,\n    version: Optional[Style] = None,\n    title: Optional[Style] = None,\n    title_description: Optional[Style] = None,\n    usage: Optional[Style] = None,\n    option: Optional[Style] = None,\n    option_description: Optional[Style] = None,\n    subcommand: Optional[Style] = None,\n    subcommand_description: Optional[Style] = None,\n    argument: Optional[Style] = None,\n    argument_description: Optional[Style] = None,\n)\n</code></pre> <p>Methods:</p> <ul> <li> <code>load_theme</code>             \u2013              <p>summary</p> </li> </ul> Source code in <code>saiuncli/theme.py</code> <pre><code>def __init__(\n    self,\n    styles: Optional[Dict[str, Style]] = None,\n    version: Optional[Style] = None,\n    title: Optional[Style] = None,\n    title_description: Optional[Style] = None,\n    usage: Optional[Style] = None,\n    option: Optional[Style] = None,\n    option_description: Optional[Style] = None,\n    subcommand: Optional[Style] = None,\n    subcommand_description: Optional[Style] = None,\n    argument: Optional[Style] = None,\n    argument_description: Optional[Style] = None,\n):\n    self.styles = styles or {}\n    self.version = version or Style(color=\"magenta\", bold=True, italic=True)\n    self.title = title or Style(color=\"white\", bold=True)\n    self.title_description = title_description or Style(color=\"white\", dim=True)\n    self.usage = usage or Style(color=\"white\", bold=True)\n    self.option_short = option or Style(color=\"green\", bold=True)\n    self.option_long = option or Style(color=\"cyan\", bold=True)\n    self.option_description = option_description or Style(color=\"white\")\n    self.subcommand = subcommand or Style(color=\"cyan\", bold=True)\n    self.subcommand_description = subcommand_description or Style(color=\"white\")\n    self.argument = argument or Style(color=\"cyan\", bold=True)\n    self.argument_description = argument_description or Style(color=\"white\")\n\n    if not self.styles:\n        self.styles = {\n            \"version\": self.version,\n            \"title\": self.title,\n            \"title_description\": self.title_description,\n            \"usage\": self.usage,\n            \"option_short\": self.option_short,\n            \"option_long\": self.option_long,\n            \"option_description\": self.option_description,\n            \"subcommand\": self.subcommand,\n            \"subcommand_description\": self.subcommand_description,\n            \"argument\": self.argument,\n            \"argument_description\": self.argument_description,\n        }\n</code></pre>"},{"location":"reference/theme/#saiuncli.theme.Theme.load_theme","title":"load_theme  <code>classmethod</code>","text":"<pre><code>load_theme(theme_file: str = BASE_THEME_FILE) -&gt; Theme\n</code></pre> <p>summary</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Theme</code> (              <code>Theme</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>saiuncli/theme.py</code> <pre><code>@classmethod\ndef load_theme(cls, theme_file: str = BASE_THEME_FILE) -&gt; \"Theme\":\n    \"\"\"_summary_\n\n    Args:\n        theme_file (str, optional): _description_. Defaults to BASE_THEME_FILE.\n\n    Returns:\n        Theme: _description_\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/theme/#saiuncli.theme.Theme.load_theme(theme_file)","title":"<code>theme_file</code>","text":"(<code>str</code>, default:                   <code>BASE_THEME_FILE</code> )           \u2013            <p>description. Defaults to BASE_THEME_FILE.</p>"}]}